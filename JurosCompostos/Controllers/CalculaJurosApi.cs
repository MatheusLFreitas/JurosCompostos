/*
 * Softplan JurosCompostos
 *
 * Swagger para aplicação JurosCompostos da SoftPlan.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: matheus.linorp@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using NSwag.Annotations;
using JurosCompostos.Services;
using JurosCompostos.Services.Exceptions;

namespace JurosCompostos.Controllers
{
    /// <summary>
    /// Serviço para calcular juros compostos em memória
    /// </summary>
    public class CalculaJurosApiController : Controller
    {
        IJurosCompostosService service;

        public CalculaJurosApiController(IJurosCompostosService _service)
        {
            service = _service;
        }

        /// <summary>
        /// Efetua o cálculo dos juros compostos
        /// </summary>

        /// <param name="valorinicial">Informe o valor inicial para o cálculo dos juros.</param>
        /// <param name="tempo">Informe o tempo em meses para o cálculo dos juros.</param>
        /// <response code="200">Sucesso</response>
        /// <response code="405">%s inválido, valor não pode ser negativo|zero.</response>
        [HttpGet]
        [Route("//calculajuros")]
        [ValidateModelState]
        [SwaggerOperation("Calculajuros")]
        public virtual IActionResult Calculajuros([FromQuery][Required()]double valorinicial, [FromQuery][Required()]int tempo)
        {
            try
            {
                return Ok(service.Calcular(valorinicial, tempo));
            }
            catch (ValorNegativoException ex)
            {
                return StatusCode(405, $"{ex.ParamName} inválido, valor não pode ser negativo.");
            }
            catch (ValorZeradoException ex)
            {
                return StatusCode(405, $"{ex.ParamName} inválido, valor não pode ser zero.");
            }
        }
    }
}
